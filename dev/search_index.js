var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = OhMyArtifacts","category":"page"},{"location":"#OhMyArtifacts","page":"Home","title":"OhMyArtifacts","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for OhMyArtifacts.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [OhMyArtifacts]","category":"page"},{"location":"#OhMyArtifacts.bind_my_artifact!-Tuple{String, AbstractString, OhMyArtifacts.SHA256}","page":"Home","title":"OhMyArtifacts.bind_my_artifact!","text":"bind_my_artifact!(artifacts_toml::String, name::AbstractString, hash::SHA256; force::Bool = false)\n\nWrites a mapping of name -> hash within the given \"Artifacts.toml\" file. If force is set to true,  this will overwrite a pre-existant mapping, otherwise an error is raised.\n\n\n\n\n\n","category":"method"},{"location":"#OhMyArtifacts.create_my_artifact-Tuple{Function}","page":"Home","title":"OhMyArtifacts.create_my_artifact","text":"create_my_artifact(f::Function)\n\nCreates a new artifact by doing path = f(working_dir), hashing the returned path, and moving it to  the artifact store. Returns the identifying hash of this artifact.\n\nf(working_dir) should return an absolute path to a single file at the top level of working_dir.\n\n\n\n\n\n","category":"method"},{"location":"#OhMyArtifacts.download_my_artifact!-Tuple{Function, Any, AbstractString, String}","page":"Home","title":"OhMyArtifacts.download_my_artifact!","text":"download_my_artifact!([downloadf::Function = Base.download], url, name::AbstractString, artifacts_toml::String;\n                     force_bind::Bool = false, downloadf_kwarg...)\n\nConvenient function that do download-create-bind together and return the content hash.  Download function downloadf should take two position arguments  (i.e. downloadf(url, dest; downloadf_kwarg...)). if force_bind is true,  it will overwrite the pre-existant binding.\n\nSee also: createmyartifact, bindmyartifact!\n\n\n\n\n\n","category":"method"},{"location":"#OhMyArtifacts.my_artifact_exists-Tuple{OhMyArtifacts.SHA256}","page":"Home","title":"OhMyArtifacts.my_artifact_exists","text":"my_artifact_exists(hash::SHA256)\n\nReturns whether or not the given artifact (identified by its SHA256 content hash) exists on-disk.\n\n\n\n\n\n","category":"method"},{"location":"#OhMyArtifacts.my_artifact_hash-Tuple{AbstractString, String}","page":"Home","title":"OhMyArtifacts.my_artifact_hash","text":"my_artifact_hash(name::AbstractString, artifacts_toml::String)\n\nReturn the hash found in artifacts_toml with given name, or nothing if not found.\n\n\n\n\n\n","category":"method"},{"location":"#OhMyArtifacts.my_artifact_path-Tuple{OhMyArtifacts.SHA256}","page":"Home","title":"OhMyArtifacts.my_artifact_path","text":"my_artifact_path(hash::SHA256)\n\nGiven an artifact (identified by SHA256 content hash), return its installation path. If the artifact does not exist,  returns the location it would be installed to.\n\nSee also: my_artifact_exists\n\n\n\n\n\n","category":"method"},{"location":"#OhMyArtifacts.my_artifacts_toml!-Tuple{Union{Nothing, Base.UUID, Module}}","page":"Home","title":"OhMyArtifacts.my_artifacts_toml!","text":"my_artifacts_toml!(pkg::Union{Module,Base.UUID,Nothing})\n\nReturn the path to (or creates) \"Artifacts.toml\" for the given pkg.\n\nSee also: @my_artifacts_toml!\n\n\n\n\n\n","category":"method"},{"location":"#OhMyArtifacts.unbind_my_artifact!-Tuple{String, AbstractString}","page":"Home","title":"OhMyArtifacts.unbind_my_artifact!","text":"unbind_my_artifact!(artifacts_toml::String, name::AbstractString)\n\nUnbind the given name from the \"Artifacts.toml\" file. Silently fails if no such binding exists within the file.\n\n\n\n\n\n","category":"method"},{"location":"#OhMyArtifacts.@my_artifact-Tuple{Any, Any, Vararg{Any, N} where N}","page":"Home","title":"OhMyArtifacts.@my_artifact","text":"@my_artifact op name [hash]\n\nConvenient macro for working with \"Artifacts.toml\". Requiring a global variable my_artifacts storing the path  to \"Artifacts.toml\" (created by @my_artifacts_toml!) to work correctly.\n\nUsage:\n\n@my_artifact :bind name hash => bind_my_artifact!(my_artifacts, name, hash)\n@my_artifact :hash name => my_artifact_hash(name, my_artifacts)\n@my_artifact :unbind name => unbind_my_artifact!(my_artifacts, name)\n@my_artifact :download name url downloadf kwarg... =>  download_my_artifact!(downloadf, url, name, my_artifacts; kwarg...)\n\nSee also: bind_my_artifact!, my_artifact_hash,  unbind_my_artifact!, @my_artifacts_toml\n\n\n\n\n\n","category":"macro"},{"location":"#OhMyArtifacts.@my_artifacts_toml!-Tuple{}","page":"Home","title":"OhMyArtifacts.@my_artifacts_toml!","text":"@my_artifacts_toml!()\n\nConvenience macro that gets/creates a \"Artifacts.toml\" and parented to the package the calling module belongs to.\n\nSee also: my_artifacts_toml!\n\n\n\n\n\n","category":"macro"}]
}
